---
- name: Deploy Nutanix Cluster with Foundation API
  hosts: localhost
  gather_facts: false
  
  vars_files:
    - cluster_vars.yml

  vars:
    foundation_api_base: "http://{{ foundation_vm.ip }}:8000/foundation"
    foundation_timeout: 7200
    progress_check_interval: 30
    max_retries: 240  # 240 * 30s = 2 hours

  tasks:
    - name: Validate required variables
      ansible.builtin.assert:
        that:
          - foundation_vm.ip is defined
          - cluster.name is defined
          - nodes | length > 0
          - network.cvm.gateway is defined
          - network.hypervisor.gateway is defined
        fail_msg: "Required variables are missing. Check your cluster_vars.yml file."

    - name: Display deployment summary
      ansible.builtin.debug:
        msg:
          - "=== NUTANIX FOUNDATION DEPLOYMENT ==="
          - "Foundation VM: {{ foundation_vm.ip }}"
          - "Cluster Name: {{ cluster.name }}"
          - "Number of Nodes: {{ nodes | length }}"
          - "Hypervisor Type: {{ hypervisor.type }}"
          - "AOS Package: {{ aos.package_filename }}"
          - "Hypervisor ISO: {{ hypervisor.iso_filename }}"

    - name: Prepare Foundation API payload
      ansible.builtin.set_fact:
        foundation_payload: >-
          {{
            {
              "blocks": [{"block_id": None, "nodes": nodes}],
              "bond_lacp_rate": None,
              "bond_mode": "",
              "clusters": [
                {
                  "cluster_name": cluster.name,
                  "cluster_init_now": False,
                  "cluster_members": nodes | map(attribute='cvm_ip') | list,
                  "cluster_external_ip": cluster.external_ip | default(omit),
                  "cvm_dns_servers": network.cvm.dns_servers | join(","),
                  "cvm_ntp_servers": network.cvm.ntp_servers | join(","),
                  "hypervisor_ntp_servers": network.hypervisor.ntp_servers | join(","),
                  "hypervisor_nameserver": network.hypervisor.nameserver | default(omit),
                  "redundancy_factor": cluster.redundancy_factor | int,
                  "placement_policy_name": cluster.placement_policy_name | default("rf2_default"),
                  "backplane_subnet": network.backplane.subnet | default(""),
                  "backplane_netmask": network.backplane.netmask | default(""),
                  "backplane_vlan": network.backplane.vlan | default(0) | int,
                  "enable_ns": cluster.enable_ns | default(false),
                  "timezone": cluster.timezone | default("UTC"),
                  "ssh_using_password": True,
                  "cluster_password": cluster.admin_password | default(omit)
                }
              ],
              "cvm_gateway": network.cvm.gateway,
              "cvm_netmask": network.cvm.netmask,
              "cvm_gb_ram": None,
              "hypervisor_gateway": network.hypervisor.gateway,
              "hypervisor_netmask": network.hypervisor.netmask,
              "ipmi_gateway": network.ipmi.gateway,
              "ipmi_netmask": network.ipmi.netmask,
              "nos_package": aos.package_filename,
              "hypervisor_iso": {hypervisor.type: {"filename": hypervisor.iso_filename, "checksum": hypervisor.iso_checksum | default(None)}},
              "hypervisor_password": hypervisor.password | default(omit),
              "rdma_passthrough": False,
              "skip_iso_validation": True,
              "svm_rescue_args": []
            }
          }}

    - name: Start foundation deployment
      ansible.builtin.uri:
        url: "{{ foundation_api_base }}/image_nodes"
        method: POST
        body_format: json
        body: "{{ foundation_payload }}"
        headers:
          Content-Type: "application/json"
        timeout: 60
        status_code: [200, 202]
        return_content: yes
      register: foundation_response
      failed_when: false

    - name: Validate foundation API response
      ansible.builtin.fail:
        msg: "Foundation API call failed: {{ foundation_response.error | default(foundation_response) }}"
      when: >
        foundation_response.status not in [200, 202] or 
        foundation_response.json.session_id is not defined

    - name: Extract session ID and start monitoring
      ansible.builtin.set_fact:
        foundation_session_id: "{{ foundation_response.json.session_id }}"

    - name: Show foundation job started
      ansible.builtin.debug:
        msg:
          - "Foundation process started with session: {{ foundation_session_id }}"
          - "Monitoring progress every {{ progress_check_interval }} seconds..."

    - name: Monitor foundation progress
      include_tasks: progress.yml


